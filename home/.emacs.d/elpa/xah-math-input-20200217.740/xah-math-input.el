
;;; xah-math-input.el --- a minor mode for inputting math and Unicode symbols. -*- coding: utf-8; lexical-binding: t; -*-

;; Copyright ¬© 2010-2020 by Xah Lee

;; Author: Xah Lee ( http://xahlee.info/ )
;; Version: 2.7.20200216233900
;; Package-Version: 20200217.740
;; Package-Commit: c1e72c4578a134e9aa3ec9ef425038d8c16fba94
;; Created: 08 Dec 2010
;; Package-Requires: ((emacs "24.1"))
;; Keywords: abbrev, convenience, unicode, math, LaTex
;; License: GPL v3
;; URL: http://ergoemacs.org/emacs/xmsi-math-symbols-input.html

;; This file is not part of GNU Emacs.

;;; Commentary:

;; A minor mode for inputing math symbols and Unicode symbols.

;; M-x `global-xah-math-input-mode' to toggle on/off for all buffers.
;; M-x `xah-math-input-mode' to toggle on/off for current buffer.

;; In lisp code:
;; (global-xah-math-input-mode 1) ; turn on globally
;; (global-xah-math-input-mode 0) ; turn off globally
;; (xah-math-input-mode 1) or (xah-math-input-mode-on) ; turn on for current buffer
;; (xah-math-input-mode 0) or (xah-math-input-mode-off) ; turn off for current buffer

;; Type ‚Äúinf‚Äù, then press „ÄêShift+Space„Äë `xah-math-input-change-to-symbol', then it becomes ‚Äú‚àû‚Äù.
;; Other examples:

;; Other examples:
;;  a ‚Üí Œ±
;;  p ‚Üí œÄ
;;  /= ‚Üí ‚â† or ne
;;  >= ‚Üí ‚â• or ge
;;  -> ‚Üí ‚Üí or rarr
;;  and ‚Üí ‚àß
;; etc.

;; M-x `xah-math-input-list-math-symbols' to see all abbrevs.

;; Home page: http://ergoemacs.org/emacs/xmsi-math-symbols-input.html

;;; Install:

;; Manual install.
;; To have emacs automatically load the file when it restarts, follow these steps:

;; Place the file in the dir „Äî~/.emacs.d/lisp/„Äï. Create the folder if you don't have it.

;; Put the following lines in your emacs init file:
;; (add-to-list 'load-path "~/.emacs.d/lisp/")
;; (require 'xah-math-input)
;; (global-xah-math-input-mode 1) ; activate the mode globally

;; References
;; http://xahlee.info/comp/unicode_index.html
;; http://xahlee.info/comp/unicode_math_operators.html
;; „ÄàHow Mathematica does Unicode?„Äâ http://xahlee.info/math/mathematica_unicode.html



;;; Code:

(defvar xah-math-input-abrvs nil "A abbreviation hash table that maps a string to unicode char.")
(setq xah-math-input-abrvs (make-hash-table :test 'equal))

(defun xah-math-input--add-to-hash (@pairs)
  "Add @pairs to the hash table `xah-math-input-abrvs'.
@pairs is a sequence of pairs. Each element is a sequence of 2 items, [key, value]."
  (mapc
   (lambda (x) (puthash (elt x 0) (elt x 1) xah-math-input-abrvs))
   @pairs))


(xah-math-input--add-to-hash
 [

	["AA" "ùî∏"] ["BB" "ùîπ"] ["CD" "‚ÑÇ"] ["CCC" "‚ÑÇ"] ["DD" "ùîª"] ["EE" "ùîº"] ["FF" "ùîΩ"] ["GG" "ùîæ"] ["HH" "‚Ñç"] ["ID" "ùïÄ"] ["III" "ùïÄ"] ["JJ" "ùïÅ"] ["KK" "ùïÇ"] ["LL" "ùïÉ"] ["MM" "ùïÑ"] ["NN" "‚Ñï"] ["OD" "ùïÜ"] ["OOO" "ùïÜ"] ["PP" "‚Ñô"] ["QQ" "‚Ñö"] ["RR" "‚Ñù"] ["SD" "ùïä"] ["SSS" "ùïä"] ["TT" "ùïã"] ["UD" "ùïå"] ["UUU" "ùïå"] ["VD" "ùïç"] ["VVVV" "ùïç"] ["WW" "ùïé"] ["XX" "ùïè"] ["YY" "ùïê"] ["ZZ" "‚Ñ§"]


	["AAIS" "ùë®"] ["BBIS" "ùë©"] ["CCIS" "ùë™"] ["DDIS" "ùë´"] ["EEIS" "ùë¨"] ["FFIS" "ùë≠"] ["GGIS" "ùëÆ"] ["HHIS" "ùëØ"] ["IIIS" "ùë∞"] ["JJIS" "ùë±"] ["KKIS" "ùë≤"] ["LLIS" "ùë≥"] ["MMIS" "ùë¥"] ["NNIS" "ùëµ"] ["OOIS" "ùë∂"] ["PPIS" "ùë∑"] ["QQIS" "ùë∏"] ["RRIS" "ùëπ"] ["SSIS" "ùë∫"] ["TTIS" "ùëª"] ["UUIS" "ùëº"] ["VVIS" "ùëΩ"] ["WWIS" "ùëæ"] ["XXIS" "ùëø"] ["YYIS" "ùíÄ"] ["ZZIS" "ùíÅ"]

	["AASI" "ùë®"] ["BBSI" "ùë©"] ["CCSI" "ùë™"] ["DDSI" "ùë´"] ["EESI" "ùë¨"] ["FFSI" "ùë≠"] ["GGSI" "ùëÆ"] ["HHSI" "ùëØ"] ["IISI" "ùë∞"] ["JJSI" "ùë±"] ["KKSI" "ùë≤"] ["LLSI" "ùë≥"] ["MMSI" "ùë¥"] ["NNSI" "ùëµ"] ["OOSI" "ùë∂"] ["PPSI" "ùë∑"] ["QQSI" "ùë∏"] ["RRSI" "ùëπ"] ["SSSI" "ùë∫"] ["TTSI" "ùëª"] ["UUSI" "ùëº"] ["VVSI" "ùëΩ"] ["WWSI" "ùëæ"] ["XXSI" "ùëø"] ["YYSI" "ùíÄ"] ["ZZSI" "ùíÅ"]


	["AAS" "ùêÄ"] ["BBS" "ùêÅ"] ["CCS" "ùêÇ"] ["DDS" "ùêÉ"] ["EES" "ùêÑ"] ["FFS" "ùêÖ"] ["GGS" "ùêÜ"] ["HHS" "ùêá"] ["IIS" "ùêà"] ["JJS" "ùêâ"] ["KKS" "ùêä"] ["LLS" "ùêã"] ["MMS" "ùêå"] ["NNS" "ùêç"] ["OOS" "ùêé"] ["PPS" "ùêè"] ["QQS" "ùêê"] ["RRS" "ùêë"] ["SSS" "ùêí"] ["TTS" "ùêì"] ["UUS" "ùêî"] ["VVS" "ùêï"] ["WWS" "ùêñ"] ["XXS" "ùêó"] ["YYS" "ùêò"] ["ZZS" "ùêô"]

	["dd" "‚ÖÜ"] ["eee" "‚Öá"] ["id" "‚Öà"] ["jj" "‚Öâ"] ["j" "‚Öâ"]

  ;; TODO: add Greek mathematical capital bold letters

  ;; TODO: add Greek mathematical small bold letters

  ;; TODO: add Latin (English) mathematical small bold letters

	])




(xah-math-input--add-to-hash
 '(

	 ;; AsciiDoc
	 ["??" "* ??? \n\n"]; personal notation for questions
	 ["fill" "     -----------------------------------------------------"] ; replacement for empty lines in output to avoid blank lines, for multi-line navigation purposes
	 ["t" "    "] ; 4 spaces
	 ["src" "[source]\n"] ; 4 spaces
	 ["dl" "----"]; source code (adoc)
	 ["dll" "----\n\n----"]; source code (adoc)
	 ["DL" "------------------------------------"]
	 ["hh" "== "] ; header ‚Äî adoc
	 ["hj" "=== "] ; header ‚Äî adoc
	 ["hk" "==== "] ; header ‚Äî adoc
	 ["hl" "===== "]; header ‚Äî adoc
	 ["pb" "++++"] ; passthrough block -> adoc use
	 ["pass" "++++"] ; passthrough block -> adoc use
	 ["lb" "...."] ; literal block -> adoc use
	 ["lit" "...."] ; literal block -> adoc use
	 ["esc" "+++"] ; escaped -> adoc use
	 ["ppp" "+++"] ; escaped -> adoc use
	 ["PPP" "+++ +++"] ; escaped -> adoc use
	 ["ESC" "+++ +++"] ; escaped -> adoc use
	 ["note" "NOTE: "]


   ;; misc.
   ["NL" "\\n"] ; newline
   ["CR" "
"] ; carriage return

   ;; digits
   ["ze" "0"]
   ["on" "1"]
   ["tw" "2"]
   ["th" "3"]
   ["fo" "4"]
   ["fi" "5"]
   ["si" "6"]
   ["se" "7"]
   ["ei" "8"]
   ["ni" "9"]
   ["te" "10"]
   ["fif" "15"]; time
   ["thi" "30"]; time
   ["fofi" "45"]; time
   ["fof" "45"]; time
   ["nn" "99"]; APL rank operator

	 ["s" "[]"] ; square
	 ["c" "{}"] ; curly
	 ["dol" "${}"]
	 ["ti" "~"]
	 ["ex" "!"]
	 ["at" "@"]
	 ["h" "#"]
	 ["ha" "#"]
	 ["do" "$"] ; dollar sign
	 ["SS" "$"] ; dollar sign
	 ["pe" "%"] ; percent
	 ["ca" "^"] ; carrot
	 ["up" "^"] ; carrot
	 ["u" "^"] ; carrot
	 ["am" "&"]
	 ["andd" "&&"]
	 ["and'" "&&"]
	 ["orr" "||"]
	 ["or'" "||"]
	 ["as" "*"] ; asterick
	 ["st" "*"]
	 ["mi" "-"]
	 ["m" "-"]
	 ["un" "_"]
	 ["pl" "+"]
	 ["p" "+"]
	 ["eq" "="]
 	 ["e" "="]
	 ["bs" "\\"] ; single backslash
	 ["mc" "/**/"] ; multi-line comment

	 ;; personal
	 ["cam" "Cameron"]
	 ["cac" "Cameron Chandoke"]
	 ["scameron" "‚äÇ‚àßm‚àär‚ç•n"] ; stylized
	 ["scameron'" "‚äÇ‚àßm‚àär‚åΩn"] ; stylized
	 ["scammy" "‚äÇ‚àßmmùõÑ"] ; stylized
	 ["scam" "‚äÇ‚àßm"] ; stylized


	 ;; phrase abbrev
	 ["afaik" "as far as i know"]
	 ["afik" "as far as i know"]
	 ["atm" "at the moment"]
	 ["dfb" "difference between"]
	 ["dbt" "difference between"]
	 ["dfbt" "difference between"]
	 ["ty" "thank you"]
	 ["ui" "user interface"]
	 ["ur" "your"]
	 ["ya" "you are"]
	 ["ru" "are you"]
	 ["vv" "vice versa"]
	 ["byway" "by the way"]
	 ["bywa" "by the way"]


	 ;; english word abbrev
	 ["ie," "i.e., "]
	 ["Ie," "I.e., "]
	 ["IE," "I.e., "]
	 ["ie" "i.e. "]
	 ["Ie" "I.e. "]
	 ["IE" "I.e. "]
	 ["eg," "e.g., "]
	 ["Eg," "E.g., "]
	 ["EG," "E.g., "]
	 ["eg" "e.g. "]
	 ["Eg" "E.g. "]
	 ["EG" "E.g. "]
	 ["cf" "c.f. "]
	 ["Cf" "C.f. "]
	 ["CF" "C.f. "]

   ; contractions
	 ["cant" "can't"]
	 ["cnt" "can't"]
	 ["wont" "won't"]
	 ["wnt" "won't"]
	 ["iv" "I've"]
	 ["ive" "I've"]
	 ["ivnt" "I haven't"]
	 ["ivent" "I haven't"]
	 ["idnt" "I didn't"]
	 ["idntv" "I wouldn't have"]
	 ["idntve" "I wouldn't have"]
	 ["idve" "I would've"]
	 ["theydntve" "they wouldn't have"]
	 ["wedntve" "we wouldn't have"]
	 ["youdntve" "you wouldn't have"]
	 ["didnt" "didn't"]
	 ["ddnt" "didn't"]
	 ["dont" "don't"]
	 ["wouldnt" "wouldn't"]
	 ["wdnt" "wouldn't"]
	 ["aint" "ain't"]
	 ["doesnt" "doesn't"]
	 ["dsnt" "doesn't"]
	 ["dsnt" "doesn't"]
	 ["couldnt" "couldn't"]
	 ["cdnt" "couldn't"]
	 ["wevnt" "we haven't"]
	 ["theyvnt" "they haven't"]
	 ["youre" "you're"]
	 ["ann" "announcement"]
	 ["arg" "argument"]
	 ["args" "arguments"]
	 ["auto" "automatic"]
	 ["bc" "because "]
	 ;; ["bg" "background"]
	 ["bt" "between"]
	 ["btn" "between"]
	 ["math" "mathematical"]
	 ["maths" "mathematics"]
	 ["prop" "proposition"]
	 ["bywa" "by the way "]
	 ["wo'" "without"]
	 ["q" "question"]
	 ["num" "number"]
	 ["instr" "instruction"]
	 ["instrs" "instructions"]
	 ["tut" "tutorial"]

	 ;; computing
	 ["fcc" "first-class citizens"]
	 ["fccs" "first-class citizens"]
	 ["gen" "generate"]
	 ["gena" "generative"]; adjective
	 ["primrec" "primitive recursion"]
	 ["linrec" "linear recursion"]
	 ["binrec" "binary recursion"]
	 ["genrec" "generative recursion"]
	 ["imp" "implication"]
	 ["fnal" "functional"]
	 ["cpt" "compute"]
	 ["cmpt" "compute"]
	 ["ans" "answer"]
	 ["elg" "elegant"]
	 ["alang" "array language"]
	 ["slang" "stack language"]
	 ["arrl" "array language"]
	 ["stackl" "stack language"]
	 ["depts" "dependent types"]
	 ["deptp" "dependent typing"]; present tense
	 ["depting" "dependent typing"]; present tense
	 ["ahk" "AutoHotkey"]
	 ["cfg" "context-free grammar"]
	 ["cj" "Clojure"]
	 ["cs" "computer science"]
	 ["CS" "Computer Science"]
	 ["oss" "open-source software"]
	 ["osrc" "open-source"]
	 ["bin" "binary"]
	 ["cdg" "coding"]
	 ["cdng" "coding"]
	 ["logi" "logical"]
	 ["cnss" "consistent"]
	 ["cons" "consistent"]
	 ["consti" "constituent"]
	 ["cnstn" "constituent"]
	 ["constt" "constitutes"]
	 ["cnstt" "constitutes"]
	 ["defi" "definition"]
	 ["nota" "notation"]
	 ["notal" "notational"]
	 ["notl" "notational"]
	 ["stmt" "statement"]
	 ["expr" "expression"]
	 ["exprs" "expressions"]
	 ["exps" "expressions"]
	 ["subexpr" "subexpression"]
	 ["subexp" "subexpression"]
	 ["subex" "subexpression"]
	 ["subexprs" "subexpressions"]
	 ["subexps" "subexpressions"]
	 ["subexs" "subexpressions"]
	 ["expo" "exponent"]
	 ["char" "character"]
	 ["chr" "character"]
	 ["autho" "authorization"]
	 ["authe" "authentication"]
	 ["init" "initialize"]
	 ["initn" "initialization"]
	 ["conj" "conjunction"]
	 ["cjn" "conjunction"]
	 ["op" "operator"]
	 ["opr" "operation"]
	 ["fn" "function"]
	 ["fns" "functions"]
	 ["par" "parentheses"]
	 ["paren" "parentheses"]
	 ["pard" "parenthesized"]
	 ["parend" "parenthesized"]
	 ["ppar" "pair of parentheses"]
	 ["epar" "enclosing parentheses"]
	 ["ebrac" "enclosing braces"]
	 ["ebrak" "enclosing brackets"]
	 ["encbrac" "enclosing braces"]
	 ["encbrak" "enclosing brackets"]
	 ["outm" "outermost"]
	 ["inm" "innermost"]
	 ["intdep" "interdependent"]
	 ["interd" "interdependent"]
	 ["interc" "interconnected"]
	 ["inde" "independent"]
	 ["arb" "independent"]
	 ["orth" "orthogonal"]
	 ["ortho" "orthogonal"]
	 ["orthn" "orthogonalization"]; noun
	 ["orthon" "orthogonalization"]; noun
	 ["ialo" "inner‚Üíouter"]
	 ["iglo" "inner‚Üíouter"]
	 ["oali" "outer‚Üíinner"]
	 ["ogli" "outer‚Üíinner"]
	 ["hashm" "hashmap"];
	 ["hasht" "hashtable"];
	 ["dic" "dictionary"];
	 ["adj" "adjective"];
	 ["homoa" "homoiconic"]; adjective
	 ["homon" "homomorphism"]; noun
	 ["homoc" "homomorphic"]
	 ["isom" "isomorphism"]
	 ["isomc" "isomorphic"]
	 ["epia" "epimorphic"]; adjective
	 ["epin" "epimorphism"]; noun
	 ["surn" "surjection"]; noun
	 ["sura" "surjective"]; adjective
	 ["injn" "injection"]; noun
	 ["inja" "injective"]; adjective
	 ["bijn" "bijection"]; noun
	 ["bija" "bijective"]; adjective
	 ["trad" "traditional"]
	 ["elem" "element"]
	 ["elems" "elements"]
	 ["metap" "metaprogramming"]
	 ["metac" "metacognition"]
	 ["hask" "Haskell"]
	 ["wrt" "with respect to "]
	 ["stdml" "Standard ML"]
	 ["ml" "machine learning"]
	 ["ai" "artificial intelligence"]
	 ["exd" "Extended Dyalog"]
	 ["edy" "Extended Dyalog"]
	 ["edya" "Extended Dyalog APL"]
	 ["exda" "Extended Dyalog APL"]
	 ["dza" "dzaima/APL"]
	 ["dapl" "dzaima/APL"]
	 ["ngn" "ngn/APL"]
	 ["apl" "APL"]
	 ["nars" "NARS"]
	 ["gnua" "GNU APL"]
	 ["gnuapl" "GNU APL"]
	 ["col" "column"]
	 ["cols" "columns"]

	 ;; tech company
	 ["gc" "Google Chrome"]
	 ["chrome" "Google Chrome"]
	 ["ff" "Firefox"]
	 ["mf" "Mozilla Firefox"]
	 ["mz" "Mozilla"]
	 ["gm" "Google Maps"]
	 ["macos" "Mac OS"]
	 ["mwin" "Microsoft Windows"]
	 ["mw" "Microsoft Windows"]
	 ["win" "Windows"]

	 ;; programing
	 ["evar" "environment variable"]
	 ["env" "environment"]
	 ["ipa" "IP address"]
	 ["jvm" "Java Virtual Machine"]
	 ["rsi" "repetitive-strain injury"]
	 ["dir" "directory"]
	 ["dirs" "directories"]
	 ["subdir" "sub-directory"]
	 ["sdir" "sub-directory"]
	 ["subdirs" "sub-directories"]
	 ["sdirs" "sub-directories"]
	 ["subf" "sub-folder"]
	 ["attr" "attribute"]
	 ["wd" "web development"]
	 ["db" "database"]
	 ["dbs" "databases"]
	 ["gui" "GUI"]
	 ["gnu" "GNU"]
	 ["gui'" "graphical user interface"]
	 ["oopf" "object oriented programing"]
	 ["oop" "OOP"]
	 ["OS" "operating system"]

	 ;; programming
	 ["eqe" "=="]
	 ["ret" "return"]
	 ["utf8" "-*- coding: utf-8 -*-"]

	 ;; catch typos
	 ["pwoer" "power"]
	 ["lsit" "list"]
	 ["csae" "case"]

))



(xah-math-input--add-to-hash
 [

 ;; regex

	;; digits
	["xAZ" "\\([A-Za-z0-9]+\\)"]
	["xPhone" "/^\b\d{3}[-.]?\d{3}[-.]?\d{4}\b$/"]
	["xWholenums" "/^\d+$/"]
	["xDec" "/^\d*\.\d+$/"]
	["xWhole+dec" "/^-?\d*(\.\d+)?$/"]
	["xWhole+dec+frac" "/[-]?[0-9]+[,.]?[0-9]*([\/][0-9]+[,.]?[0-9]*)*/"]
	;; alphanumeric
	["xAN-nospace" "/^[a-zA-Z0-9]*$/"]
	["xAN" "/^[a-zA-Z0-9 ]*$/"]
	;; email
	["xEmail" "/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,5})$/"]
	["xEmailc" "/^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6})*$/"]
	["xEmailu" "/^([a-z0-9_\.\+-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/"]
	;; Time Format HH:MM 12-hour, optional leading 0
	["xHH:MM-12h-0o" "/^(0?[1-9]|1[0-2]):[0-5][0-9]$/"]
	;; Time Format HH:MM 12-hour, optional leading 0, Meridiems [AM/PM]
	["xHH:MM-12h-0o-AP" "/((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))/"]
	;; match duplicates in a string
	["xStringdups" "/(\b\w+\b)(?=.*\b\1\b)/"]
	;; file path w/ filename & extension
	["xPathNameExt" "/((\/|\\|\/\/|https?:\\\\|https?:\/\/)[a-z0-9 _@\-^!#$%&+={}.\/\\\[\]]+)+\.[a-z]+$/"]
	;; file path w/ optional filename, extension
	["xPathonamEext" "/^(.+)/([^/]+)$/"]
	;; file name w/ 3-char extension
	["xFileNameExt3" "/^[\w,\s-]+\.[A-Za-z]{3}$/"]
	;; social security number
	;; can use either hypen(-) or space( ) character as separator
	["xSSN" "/^((?!219-09-9999|078-05-1120)(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4})|((?!219 09 9999|078 05 1120)(?!666|000|9\d{2})\d{3} (?!00)\d{2} (?!0{4})\d{4})|((?!219099999|078051120)(?!666|000|9\d{2})\d{3}(?!00)\d{2}(?!0{4})\d{4})$/"]
	;; passport
	["xPassport" "/^[A-PR-WY][1-9]\d\s?\d{4}[1-9]$/"]

])


;; (xah-math-input--add-to-hash
;;  [
;; 	;; ["ydl" "youtube-dl -x --no-playlist -o "~/Music/youtube-dl/%(title)s.%(ext)s" --audio-format mp3'"]
;; 	;; ["ydl" "'youtube-dl -x --no-playlist -o "~/Music/youtube-dl/%(title)s.%(ext)s" --audio-format mp3'"]
;; ])



;; (xah-math-input--add-to-hash
;;  [
;; 	;; ["def" "define "]
;; 	;; ["deft" "define-type "]
;; 	;; ["fn" "define "]
;; ])




;; Mathematics
(xah-math-input--add-to-hash
 '(

   ; Predicate logic
	["bim" "‚ü∑ "]; bi-implication
	["bimp" "‚ü∑ "]; bi-implication
	["same" "‚ü∑ "]
	["‚ü∑ " "<--> "]; for Wunderlist
	["All" "‚àÄ"]
  ["all" "‚àÄ"]
  ["for" "‚àÄ"]; for x in X --> ‚àÄx‚ààX
	["exi" "‚àÉ"]
	["any" "‚àÉ"]
	["some" "‚àÉ"]
	["nex" "‚àÑ"]
	["none" "‚àÑ"]
	["an" "‚àß"]
	["and" "‚àß"]
  ["or" "‚à®"]
	["nor'" "‚äΩ"]; original reserved for APL version
	["nand'" "‚äº"]; original reserved for APL version
	["nan'" "‚äº"]; original reserved for APL version
	["xor" "‚äª"]
	["OR" "‚ãÅ"]
	["AND" "‚ãÄ"]
	["not" "¬¨"] ; not-sign
	["fnot" "‚åô"] ; (vertically) flipped not-sign
	["fno" "‚åô"] ; (vertically) flipped not-sign
	["rnot" "‚åê"] ; reversed not-sign
	["rno" "‚åê"] ; reversed not-sign
	["let" "‚à¥ "]
	["wher" "‚àµ "]
	["where" "‚àµ "]
	["qed" "‚àé"]
	["eop" "‚àé"]; "end of proof"

	["proh" "üõá"]
	["prohibit" "üõá"]
	["prohibited" "üõá"]
	["cannot" "üõá"]
	["nallow" "üõá"]


  ; Set logic
	["UU" "‚à™"]
	["II" "‚à©"]
 	["‚à™" "‚ãÉ"]; n-ary
	["‚à©" "‚ãÇ"]; n-ary
 	["UU'" "‚ãÉ"]; n-ary ; UU'
	["II'" "‚ãÇ"]; n-ary ; II'
	["‚ãÉ" "‚à™"]; n-ary to binary
	["‚ãÇ" "‚à©"]; n-ary to binary
 	["(" "‚äÇ"]
 	["‚äÇ" "‚äÜ"]
 	["‚äÜ" "‚äÑ"]
 	["‚äÑ" "‚äà"]
 	["‚äà" "‚äÇ"]
 	[")" "‚äÉ"]
 	["‚äÉ" "‚äá"]
 	["‚äá" "‚äÖ"]
 	["‚äÖ" "‚äâ"]
 	["‚äâ" "‚äÉ"]
	["in'" "‚àà"] ; "in" reserved for small-elem-of (APL)
 	["CC" "‚äÜ"]

  ["ele" "‚àà"] ; small element of; enlist
	["nin" "‚àâ"]
	["con" "‚àã"]
	["cont" "‚àã"]
	["nco" "‚àå"]
	["ncon" "‚àå"]
	["sc" "‚àÅ"] ; set complement
  ["comp" "‚àÅ"]
	["scom" "‚àÅ"]
	["scomp" "‚àÅ"]
	["pset" "‚Ñò"] ; powerset
	["ps" "‚Ñò"] ; powerset
	["\\'" "‚àñ"] ; double backslash; each escaped here by another backslash
	["smi" "‚àñ"] ; set minus
	["set-" "‚àñ"] ; set minus
	["s-" "‚àñ"] ; set minus
	["emp" "‚àÖ"]
	["bagh" "‚üÖ"]
	["bagl" "‚üÜ"]
	["inbag" "‚ãø"]
	["inb" "‚ãø"]; in bag

	["Z-" "‚Ñ§‚Åª "]
	["Z-0" "‚Ñ§‚Å∞‚Åª "]
	["Z+0" "‚Ñ§‚Å∞‚Å∫ "]
	["Z+" "‚Ñ§‚Å∫ "]
	["R-" "‚Ñù‚Åª "]
	["R-0" "‚Ñù‚Å∞‚Åª "]
	["R+0" "‚Ñù‚Å∞‚Å∫ "]
	["R+" "‚Ñù‚Å∫ "]
	["Q-" "‚Ñö‚Åª "]
	["Q-0" "‚Ñö‚Å∞‚Åª "]
	["Q+0" "‚Ñö‚Å∞‚Å∫ "]
	["Q+" "‚Ñö‚Å∫ "]
	["Z-" "‚Ñ§‚Åª "]
	["Z0-" "‚Ñ§‚Å∞‚Åª "]
	["Z0+" "‚Ñ§‚Å∞‚Å∫ "]
	["Z+" "‚Ñ§‚Å∫ "]
	["R-" "‚Ñù‚Åª "]
	["R0-" "‚Ñù‚Å∞‚Åª "]
	["R0+" "‚Ñù‚Å∞‚Å∫ "]
	["R+" "‚Ñù‚Å∫ "]
	["Q-" "‚Ñö‚Åª "]
	["Q0-" "‚Ñö‚Å∞‚Åª "]
	["Q0+" "‚Ñö‚Å∞‚Å∫ "]
	["Q+" "‚Ñö‚Å∫ "]
	["ZN" "‚Ñ§‚Åª "]
	["ZN0" "‚Ñ§‚Å∞‚Åª "]
	["ZP0" "‚Ñ§‚Å∞‚Å∫ "]
	["ZP" "‚Ñ§‚Å∫ "]
	["RN" "‚Ñù‚Åª "]
	["RN0" "‚Ñù‚Å∞‚Åª "]
	["RP0" "‚Ñù‚Å∞‚Å∫ "]
	["RP" "‚Ñù‚Å∫ "]
	["QN" "‚Ñö‚Åª "]
	["QN0" "‚Ñö‚Å∞‚Åª "]
	["QP0" "‚Ñö‚Å∞‚Å∫ "]
	["QP" "‚Ñö‚Å∫ "]




	["." "‚àò"]
	["of" "‚àò"]; composition
	["map" "‚Ü¶"]
	["maps" "‚Ü¶"]
	["app" "‚Ü•"] ; apply


	["ne" "‚â†"]
	["le" "‚â§"]
	["<" "‚â§"]
	["<u" "‚â§"]
	["ge" "‚â•"]
	[">" "‚â•"]
	[">u" "‚â•"]
	["le'" "‚©Ω"]
	["<u''" "‚©Ω"]
	["ge'" "‚©æ"]
	[">u'" "‚©æ"]
	["abs" "‚à£"]
	["ab" "‚à£"]
	["|" "‚à£"]


	["sum" "‚àë"]
	["prod" "‚àè"]
	["cop" "‚àê"]
	["acop" "‚®ø"]


	["cro" "‚®Ø"]
  ["cross" "‚®Ø"]
  ["delt" "‚àÜ"]
  ["Delta" "‚àÜ"]
	["del" "‚àá"]
	["nab" "‚àá"] ; nabla


	["G" "ùö™"]; gamma function
  ["lam" "Œª"]; lambda
  ["la" "Œª"]; lambda
	["pi" "œÄ"]
	["pib" "ùõë"] ; pi bold
	["eul" "‚ÑØ"]; euler
	["eul'" "‚Ñá"]; euler
	["pla" "‚Ñé"]; planck
	["gam" "ùõæ"]; gamma
	["inf" "‚àû"]; infinity


	["est" "‚ÑÆ"]
	["pred" "‚â∫"]
	["succ" "‚âª"]
	["prer" "‚ä∞"] ; precedes under relation
	["sucr" "‚ä±"] ; succeeds under relation
	[":::" "‚à∑"]; "::" taken by APL 'each' (¬®); just having ":" leads to easy mistakes why typing all-caps word followed by colon
	["prop" "‚àù"]
	["pro" "‚àù"]
	["O+" "‚äï"]
	["O--" "‚äñ"]
	["O*" "‚äõ"]
	["Od" "‚®∏"]
	["O/" "‚äò"]
	["cir+" "‚äï"]
	["cir-" "‚äñ"]
	["cirx" "‚äó"]
	["cir*" "‚äõ"]
	["cird" "‚®∏"]
	["cir/" "‚äò"]
	["cirm" "‚äñ"]
	["cirp" "‚äï"]
	["cirs" "‚äõ"]

  ;; operators
  ;; ["cp" "‚äï "] ; circle plus
  ;; ["ct" "‚äó "] ; circle times
  ;; ["cm" "‚äñ "] ; circle minus
  ;; ["cd" "‚äò "] ; circle divide
  ["p'" "‚Ä≤"]  ; prime -- save ' for back-tick (grave accent) ` (adoc, etc)
  ["‚Åó" "‚Ä≤"]  ; prime -- cycle from quad prime
  ["p''" "‚Ä≥"] ; double prime
  ["‚Ä≤" "‚Ä≥"] ; double prime
  ["p'''" "‚Ä¥"] ; triple prime
  ["‚Ä≥" "‚Ä¥"] ; triple prime
  ["p''''" "‚Åó"] ; quad prime
  ["‚Ä¥" "‚Åó"] ; quad prime
  [".m" "¬∑"]


  ["+-" "¬±"]
  ["-+" "‚àì"]
  ["pm" "¬±"]
  ["mp" "‚àì"]


  ["rt" "‚àö"]
  ["rtt" "‚àõ "]
  ["rtc" "‚àõ "]
  ["crt" "‚àõ "] ; cube root
  ["trt" "‚àõ "] ; third root
  ["rt3" "‚àõ "]
  ["rtf" "‚àú "]
  ["frt" "‚àú "] ; fourth root
  ["rt4" "‚àú "]



  ["inv'" "¬Ø¬π"]
  ["d" "‚àÇ"]
  ["int" "‚à´"]
  ["ii" "‚à¨"]
  ["iii" "‚à≠"]
  ["iiii" "‚®å"]
  ["io" "‚àÆ"]
  ["iio" "‚àØ"]
  ["iiio" "‚à∞"]
  ["icl" "‚à±"]
  ["cli" "‚à±"]
  ["iac" "‚®ë"]
  ["aci" "‚®ë"]
  ["aci" "‚®ë"]
  ["iocl" "‚à≤"]
  ["cio" "‚à≤"]
  ["clio" "‚à≤"]
  ["ioac" "‚à≥"]
  ["acio" "‚à≥"]
  ["intf" "‚®ç"]
  ["ioap" "‚®ï"] ; integral around a point
  ["int=" "‚®é"] ; integral with double stroke
  ["intu" "‚®ö"] ; integral with union
  ["inti" "‚®ô"] ; integral with intersection
  ["fourier" "‚Ñ±"]
  ["fft" "‚Ñ±"]

  ["{{" "‚¶É"]
  ["}}" "‚¶Ñ"]
  ["{{}}" "‚¶É‚¶Ñ"]
  ["[[" "„Äö"]
  ["]]" "„Äõ"]
  ["[[]]" "„Äö„Äõ"]

  ["o-" "‚üú"]
  ["aft" "‚üú"]; BQN's "after"
  ["-o" "‚ä∏"]
  ["bef" "‚ä∏"]; BQN's "before"
  ["o-o" "‚ßü "]
  ["o-." "‚ä∂"]
  [".-o" "‚ä∑"]
  ;; ["cur" "‚´∂ "] ; curry


  ))


;; general programming
(xah-math-input--add-to-hash
 [

  ["re" "require ''"]
  ["im" "import "]

 ])



;; APL primitives
(xah-math-input--add-to-hash
 [

  ["l" "{}"]; lambda
  ["ah" "‚Üê"]
  ["al" "‚Üí"]
  ["ta" "‚Üë"] ; take
  ["mix" "‚Üë"]
  ["au" "‚Üë"]
  ["ak" "‚Üë"]
  ["ad" "‚Üì"]
  ["aj" "‚Üì"]
  ["dr" "‚Üì"] ; drop
  ["sp" "‚Üì"] ; split
  ["spl" "‚Üì"] ; split
  ["is" "‚Üê"]
  ["def" "‚Üê"]
  ["df" "‚Üê"]
  [")" "‚äÉ"]
  ["dis" "‚äÉ"]; disclose
  ["unb" "‚äÉ"]; unbox
  ["pic" "‚äÉ"]; pick
  ["x" "√ó"]; times
  ;; ["vh" "‚çÖ"] ; left vane
  ;; ["vl" "‚çÜ"] ; right vane
  ;; ["vk" "‚çè"] ; upward vane
  ;; ["vj" "‚çñ"] ; downward vane
  ;; ["vu" "‚çè"] ; upward vane
  ;; ["vd" "‚çñ"] ; downward vane
  ["div" "√∑"]; divide
  ["di" "√∑"]; divide
  ["li" "‚Äø"]; link
  ["ln" "‚Äø"]; link

  ["ta'" "‚Üë"]; take
  ["dr'" "‚Üì"]; drop
  ["x'" "√ó"]
  ["-" "¬Ø"] ; high minus
  ;; ["_" "¬Ø"] ; high minus
  ["n" "¬Ø"] ; high minus
  ["non" "¬Ø1"] ; "negative one"
  ["lo" "‚çü"]
  ["log" "‚çü"]
  ["lg" "‚çü"]
  ["ee" "="]
  ["ma" "‚â°"]; match
  ["mat" "‚â°"]; match
  ["dep" "‚â°"]; depth
  ["tal" "‚â¢"]; tally
  ["co" "‚â¢"]; count
  ["cou" "tal"]; "count"
  ["nat" "‚â¢"]; not match "natch"
  ["na" "‚â¢"]; not match "natch"
  ["nm" "‚â¢"]; not match
  ["een" "‚â¢"]
  ["nee" "‚â¢"]
  ["ee/" "‚â¢"]
  ["lcm" "‚àß"] ; lowest common multiple
  ["gcd" "‚à®"] ; lowest common multiple
  ["r" "‚ç¥"]
  ["rr" "‚ç¥‚ç¥"]
  ["i" "‚ç≥"]
  ["iu" "‚ç∏"]
	["wh" "‚ç∏"]; where
	["whe" "‚ç∏"]; where
  ["w" "‚çµ"]
  ["ww" "‚çµ‚çµ"]
  ["wwu" "‚çπ"]
  ["a" "‚ç∫"]
  ["aw" "‚ç∫‚çµ"]
  ["wa" "‚çµ‚ç∫"]
  ["aa" "‚ç∫‚ç∫"]
  ["aau" "‚ç∂"]
  ["in" "‚àä"] ; small element of; enlist
  ["enl" "‚àä"] ; small element of; enlist
  ["ele" "‚àä"] ; small element of; enlist
  ["e'" "‚àä"] ; to avoid issue with e.g., "Xe"‚Üí'
  ["eu" "‚ç∑"]
  ["fin" "‚ç∑"]; find
  ["to" "*"]; exponent
  ["flr" "‚åä"] ; floor
  ["min" "‚åä"]
  ["cei" "‚åà"] ; ceiling
  ["max" "‚åà"]
  ["mod" "‚à£"]
  ["mo" "‚à£"]
  ["inc'" "‚àÜ"] ; increment
  ["enc" "‚ä§"] ; encode -- enc already taken by enclose (more common)
  ["To" "‚ä§"] ; encode -- enc already taken by enclose (more common)
  ["TO" "‚ä§"] ; encode -- enc already taken by enclose (more common)
  ["ba" "‚ä§"] ; "base" -- encode -- enc already taken by enclose (more common)
  ["bas" "‚ä§"] ; "base" -- encode -- enc already taken by enclose (more common)
  ["dec" "‚ä•"] ; decode
  ["fr" "‚ä•"] ; "from" -- decode
  ["fro" "‚ä•"] ; "from" -- decode
  ["ant" "‚ä•"] ; "anti-base" -- decode
  ["lef" "‚ä£"] ; left
  ["lf" "‚ä£"] ; left
  ["ri" "‚ä¢"] ; right
  ["rig" "‚ä¢"] ; right
  ;; ["th" "‚ä£"] ; tack left (vim keys) TODO: activate after mapping kmonad
  ;; ["tl" "‚ä¢"] ; tack right (vim keys) TODO: activate after mapping kmonad
  ["mad" "‚åπ"] ; matrix divide
  ["mdi" "‚åπ"] ; matrix divide
  ["mdiv" "‚åπ"] ; matrix divide
  ["minv" "‚åπ"] ; matrix inverse
  ["ci" "‚óã"] ; pi-times, circular fns
  ["cir" "‚óã"] ; pi-times, circular fns
  ["OO" "‚óã"] ; pi-times, circular fns
  ["o;" "‚óã"] ; pi-times, circular fns
  ["o." "‚àò."] ; outer product
  ["out" "‚çú"] ; outer product
  ["out'" "‚àò."] ; table (outer product)
  ["tbl" "‚çú"] ; table (outer product)
  ["!!" "‚Äº"]
  ["ds" "‚Äº"] ; double shriek
  ["xx" "‚Äº"] ; exclamation exclamation
  ["ro" "‚åΩ"]
  ["rot" "‚åΩ"]
  ["rof" "‚äñ"] ; rotate first
  ["rf" "‚äñ"] ; rotate first
  ["fl" "‚äñ"] ; flip
  ["tr" "‚çâ"] ; transpose
  ["tra" "‚çâ"] ; transpose
  ["\\" "‚çÄ"] ; backslash bar; single backslash; escaped here
  ["\\b" "‚çÄ"] ; backslash bar; single backslash; escaped here
  ["‚çÄ" "\\"] ; single backslash; escaped here
  ["exp" "‚çÄ"] ; expand
  ["expa" "‚çÄ"] ; expand
  ["/" "‚åø"] ; slash bar
  ["‚åø" "/"]
  ["/b" "‚åø"] ; slash bar
  ["rp" "‚åø"] ; replicate
  ["rep" "‚åø"] ; replicate
  ["ref" "‚åø"] ; replicate first
  ["gu" "‚çã"]
  ["ug" "‚çã"]
  ["gd" "‚çí"]
  ["dg" "‚çí"]
  ["gru" "‚çã"]
  ["grd" "‚çí"]
  ["ugr" "‚çã"]
  ["dgr" "‚çí"]
  ["zil" "‚ç¨"] ; zilde
  ["zi" "‚ç¨"]
  ["0v" "‚ç¨"]
  ["," "‚ç™"] ; comma bar
  [",b" "‚ç™"] ; comma bar
  [",u" "‚ç™"]
  ;; [";" "‚çÆ"]; taken by ‚ãÑ
  [";b" "‚çÆ"]
  [";u" "‚çÆ"]
  ["fmt" "‚çï"]
  ["fm" "‚çï"]
  ["ft" "‚çï"]
  ["exc" "‚çé"]
  ["xc" "‚çé"]
  ["ev" "‚çé"]
  ["eva" "‚çé"]
  ["IB" "‚å∂"]
  ["ib" "‚å∂"]
  ["::" "¬®"] ; each
  ["ea" "¬®"] ; each
  ["nan" "‚ç≤"]
  ["nor" "‚ç±"]
  ["pow" "‚ç£"]
  ["pwr" "‚ç£"]
  ["pw" "‚ç£"]
  ["po" "‚ç£"]
  ["sel" "‚ç®"] ; selfie TODO: change back to "se" once I'm using kmonad for home-row numbers
  ["sese" "‚ç®‚ç®"]
  ;; ["ra" "‚ç§"] ; rank
  ["rk" "‚ç§"] ; rank
  ["rnk" "‚ç§"] ; rank
  ["dia" "‚ãÑ "]
  ["sep" "‚ãÑ "] ; separator
  ["no" "~"]
  ["wo" "~"]
  ["ov" "‚ç•"] ; Over
  ["ove" "‚ç•"] ; Over
  ["dp" "‚ç•"] ; Depth
  ["de" "‚ç•"] ; Depth
  ["dep" "‚ç•"] ; Depth
  ["o" "‚àò"]
  ;; ["o_" "‚çõ"]
  ["oo" "‚àò"]
  ["ou" "‚çõ"]
  ;; ["._" "‚çõ"]
  ;; [".u" "‚çõ"]
  ;; [".r" "‚çõ"]
  ["rh" "‚çõ"] ; reverse hook
  ["rc" "‚çõ"] ; reverse compose
  ;; ["rwi" "‚çõ"] ; reverse withe
  ;; ["rw" "‚çõ"] ; reverse withe
  ;; ["r." "‚çõ"]
  ["wi" "‚ç©"]
  ["wit" "‚ç©"] ; withe
  [">:" "‚ç©"]
  ["el" "·ëà"]; each-right (vim keys)
  ["eachr" "·ëà"]; each-right (vim keys)
  ["<:" "·ëà"]
  ["eh" "·êµ"]; each-left (vim keys)
  ["eachl" "·êµ"]; each-left (vim keys)
  ["b:" "‚ç†"] ; variant
  ["b;" "‚ç†"] ; variant
  ["bh" "‚çÑ"] ; "box h"
  ["bl" "‚çÉ"] ; "box l"
  ["va" "‚ç†"] ; variant
  ["var" "‚ç†"] ; variant
  ["sys" "‚éï"]
  ["bo" "‚éï"] ; box
  ["inp" "‚éï"] ; input
  ["ato" "‚ç§"]
  ["atop" "‚ç§"]
  ["ind" "‚å∑"]; index
  ["mate" "‚å∑"]; materialize
  ["sho" "‚å∑"]; materialize
  ["show" "‚å∑"]; materialize
  ["disp" "‚å∑"]; materialize
  ["key" "‚å∏"]
  ["ke" "‚å∏"]
  ["b'" "‚çû"];
  ["ste" "‚å∫"]
  ["stn" "‚å∫"]
  ["sten" "‚å∫"]
  ["ms" "‚ç¶"]; multi-set in NARS2000
  ["symd" "¬ß"]; NARS2000 symmetric set difference ("Section" symbol)
  ["SY" "¬ß"]; NARS2000 symmetric set difference ("Section" symbol)
  ["syd" "¬ß"]; NARS2000 symmetric set difference ("Section" symbol)
  ["sym" "¬ß"]; NARS2000 symmetric set difference ("Section" symbol)
  ["sd" "¬ß"]; NARS2000 symmetric set difference ("Section" symbol)
  ["mer" "‚çà"]; merge in NARS2000 APL
  ["me" "‚çà"]; merge in dzaima/APL
  ["mrg" "‚çà"]; merge in dzaima/APL
  ["mr" "‚çà"]; merge in dzaima/APL
  ["mg" "‚çà"]; merge in dzaima/APL
  ["cin" "‚çß"]; count-in in dzaima/APL
  ["ci" "‚çß"]; count-in in dzaima/APL
  ;; ["um" "‚â†"]; unique mask in Dyalog APL
  ["ns" "‚â†"]; nub sieve in Dyalog APL
  ["us" "‚â†"]; unique sieve in Dyalog APL
  ["ns'" "‚çß"]; nub sieve in dzaima/APL
  ;; ["um'" "‚çß"]; unique mask in dzaima/APL
  ["us'" "‚çß"]; unique sieve in dzaima/APL
  ["pri" "‚ç≠"]; primes in Extended Dyalog
  ["pr" "‚ç≠"]; primes in Extended Dyalog
  ["und" "‚ç¢"]; under
  ["T:" "‚ç°"]; cumulative repeat
  ["t:" "‚ç°"]; cumulative repeat
  ["cu" "‚ç°"]; cumulative repeat
  ["cur" "‚ç°"]; cumulative repeat
  ["tran" "‚çë"]; transform
  ["tb" "‚çë"]; T bar
  ["Tb" "‚çë"]; T bar
  ["ob" "‚ç´"]; obverse
  ["obv" "‚ç´"]; obverse
  ["inv" "‚ç£¬Ø1"]; inverse
  ["rec" "‚àá"];
  ["VV" "‚àá"]
  ["VVV" "‚àá‚àá"]
  ["rec'" "‚àá‚àá"]
  ["ac" "   ‚çù "] ; APL comment
  ["ac'" "‚çù "] ; APL comment
  ["aco" "   ‚çù "] ; APL comment
  ["aco'" "‚çù "] ; APL comment
  ["ninf" "¬Ø‚àû"]; neg. infinity
  ["dfns" "‚åÇ"]; dfns workspace
  ["ho" "‚åÇ"]
  ["hou" "‚åÇ"]
  ["'b" "‚çò"]
  ["wor" "‚çò"] ; words
  ["b/" "‚çÅ"]
  ["diag" "‚çÅ"]
  ["obl" "‚çÅ"] ; "oblique (diagonals)" (J vb name)
  ["b\\" "‚çÇ"]
  ["ce" "‚ç§¬Ø1"] ; Cells
  ["ce'" "Àò"] ; Cells
  ["val" "‚äò"] ; Valences
  ["md" "‚äò"] ; monad-dyad
  ["fc" "‚äè"] ; First Cell
  ;; ["bhe" "‚äë"] ; BQN Head
  ;; ["bpic" "‚äë"] ; BQN Pick
  ["bsel" "‚äè"] ; BQN Select
  ["cla" "‚äê"] ; Classify (BQN)
  ["bi" "‚äê"] ; BQN Index Of
  ["bio" "‚äê"] ; BQN Index Of
  ["pin" "‚äí"] ; Progressive Index Of‚Äî‚ÄîBQN
  ["pio" "‚äí"] ; Progressive Index Of‚Äî‚ÄîBQN
  ["oc" "‚äí"] ; Occurrence Count‚Äî‚ÄîBQN
  ["occ" "‚äí"] ; Occurrence Count‚Äî‚ÄîBQN
  ["gr" "‚äî"] ; Group
  ["grp" "‚äî"] ; Group
  ["inv''" "‚Åº"] ; inverse
  ["heq" "‚Åº"] ; high equals
  ["he" "‚Åº"] ; high equals


  ["off" "‚éïOFF"]
  ["nums" "‚éïAVU"]
  ["numvec" "‚éïAVU"]
  ["suits" "‚ô†‚ô°‚ô¢‚ô£"]
  ["cards" "‚ô†‚ô°‚ô¢‚ô£"]
  ["spade" "‚ô†"]
  ["heart" "‚ô°"]
  ["diamond" "‚ô¢"]
  ["club" "‚ô£"]
  ["suitsw" "‚ô§‚ô°‚ô¢‚ôß"]
  ["cardsw" "‚ô§‚ô°‚ô¢‚ôß"]
  ["suitsb" "‚ô†‚ô•‚ô¶‚ô£"]
  ["cardsb" "‚ô†‚ô•‚ô¶‚ô£"]

  ["IO" "‚éïIO"]
  ["IO0" "‚éïIO‚Üê0"]
  ["IO1" "‚éïIO‚Üê1"]
  ["adl" "‚çù--------------------"] ; for separating lines of code which would be incorrectly formatted by adoc if adjacent
  ["apld" "‚éïIO‚Üê0\n]box on -style=max\n]rows on\n"]
  ["aplsetup" "‚éïIO‚Üê0\n]box on -style=max\n]rows on\n"]
  ["boxoff" "]box off"]
  ["boxnon" "]box on -style=non"]
  ["box0" "]box on -style=non"]
  ["boxmin" "]box on -style=min"]
  ["box1" "]box on -style=min"]
  ["boxmid" "]box on -style=mid"]
  ["box2" "]box on -style=mid"]
  ["boxmax" "]box on -style=max"]
  ["box3" "]box on -style=max"]
  ["ss" "      "]; six spaces

  ;; ---- idioms ------
  ["ce" "‚ç§¬Ø1"]; Cells
  ["cr" "‚ç§99 ¬Ø1"]; Cells right
  ["cl" "‚ç§¬Ø1 99"]; Cells left
  ["er" "‚ç§99 0"]; Each right
  ["el" "‚ç§0 99"]; Each left
  ["ax" "‚ç≥‚â¢‚ç¥"]; axes
  ["ax'" "‚ç≥‚àò‚â¢‚àò‚ç¥‚ç§"]; axes ;‚ç≥‚àò‚â¢‚àò‚ç¥‚ç§‚ä¢ ;‚ç≥‚àò‚â¢‚àò‚ç¥‚ç§‚ä£
  ["tai" "1‚Üì"]; tail (Haskell semantic)
  ["tl" "1‚Üì"]; tail (Haskell semantic)
  ["tai'" "(1‚àò‚Üì)"]; tail (Haskell semantic)
  ["tl'" "(1‚àò‚Üì)"]; tail (Haskell semantic)
  ["beh" "1‚Üì"]; behead
  ["be" "1‚Üì"]; behead
  ["beh'" "(1‚àò‚Üì)"]; behead
  ["be'" "(1‚àò‚Üì)"]; behead
  ["last" "¬Ø1‚Üë"]; last
  ["las" "¬Ø1‚Üë"]; last
  ["la" "¬Ø1‚Üë"]; last
  ["last'" "(¬Ø1‚àò‚Üë)"]; last
  ["las'" "(¬Ø1‚àò‚Üë)"]; last
  ["la'" "(¬Ø1‚àò‚Üë)"]; last
  ["end" "¬Ø1‚Üë"]; last
  ["curt" "¬Ø1‚Üì"]; curtail
  ["drla" "¬Ø1‚Üì"]; "drop last"
  ["sq" "*2"]; square
  ["sq'" "*‚àò2"]; square
  ["root" "*0.5"]
  ["roo" "*0.5"]
  ["root'" "(*‚àò0.5)"]
  ["roo'" "(*‚àò0.5)"]
  ["dou" "√ó2"]; double
  ["dou'" "(√ó‚àò2)"]; double
  ["inc" "+1"]; increment
  ["inc'" "(+‚àò1)"]; increment
  ["decr" "-1"]; decrement
  ["decr'" "(-‚àò1)"]; decrement
  ["halve" "√∑2"]; halve
  ["hal" "√∑2"]; halve
  ["halve'" "(√∑‚àò2)"]; halve
  ["hal'" "(√∑‚àò2)"]; halve
  ["beh'" "(1‚àò‚Üì)"]; behead
  ["be'" "(1‚àò‚Üì)"]; behead
  ["end'" "(¬Ø1‚àò‚Üë)"]; last
  ["curt'" "(¬Ø1‚àò‚Üì)"]; curtail
  ["cur'" "(¬Ø1‚àò‚Üì)"]; curtail
  ["drla'" "(¬Ø1‚àò‚Üì)"]; "drop last"
  ["sq'" "(*‚àò2)"]; square
  ["root'" "(*‚àò0.5)"]
  ["roo'" "(*‚àò0.5)"]
  ["dou'" "(√ó‚àò2)"]; double
  ["incr'" "(+‚àò1)"]; increment
  ["inc'" "(+‚àò1)"]; increment
  ["decr'" "(-‚àò1)"]; decrement
  ["halve'" "(√∑‚àò2)"]; halve
  ["hal'" "(√∑‚àò2)"]; halve
  ["avg" "(+/√∑‚â¢)"]
  ["mean" "(+/√∑‚â¢)"]
  ["mea" "(+/√∑‚â¢)"]
  ["pai" "{‚ç∫‚çµ}"]; pair
  ["pa" "{‚ç∫‚çµ}"]; pair
  ["wor" "(‚â†‚äÜ‚ä¢)"]; words
  ;; ["words" "{1‚Üì¬®(1+' '=‚çµ)‚äÇ‚çµ}"]
  ;; ["wor" "{1‚Üì¬®(1+' '=‚çµ)‚äÇ‚çµ}"]
  ;; ["‚çò" "{1‚Üì¬®(1+' '=‚çµ)‚äÇ‚çµ}"]
  ;; ["words'" "(1‚Üì¬®(1‚àò+)‚àò(' '‚àò=)‚äÇ‚ä¢)"] ; tacit (monadic)
  ;; ["wor'" "(1‚Üì¬®(1‚àò+)‚àò(' '‚àò=)‚äÇ‚ä¢)"] ; tacit (monadic)
  ;; ["‚çò'" "{1‚Üì¬®(1‚àò+)‚àò(' '‚àò=)‚çõ‚äÇ}"] ; tacit (monadic)
  ["ra" "‚â¢‚ç¥"]; rank of A
  ["ra'" "‚â¢‚àò‚ç¥"]; rank of A


])


(xah-math-input--add-to-hash
 '(
   ;; ["<" "‚â∫ "]
   ;; [">" "‚âª "]

   ["<=" "‚â§ "]
   [">=" "‚â• "]
   ;; ["!el" "‚àâ "]
   ;; ["el" "‚àà "]
   ;; ["in" "‚àà "]
   ["&&" "‚àß "]
   ["||" "‚à® "]
   ;; ["not" "¬¨ "]
   ;; ["===" "‚â° "]
   ;; ["eq" "‚â° "]
   ;; ["xor" "‚äª "]
   ;; ["nand" "‚äº "]
   ;; ["nor" "‚äΩ "]

   ["~" "‚âà"]
   [":=" "‚âî"]
   ["=:" "‚âï"]
   ["!=" "‚â†"]
   ["/=" "‚â†"]
   ["ne" "‚â†"]

   ;; ["fa" "‚àÄ "] ["forall" "‚àÄ "]
   ;; ["ex" "‚àÉ "]

   ))


(xah-math-input--add-to-hash
 '(
   ["/_" "‚à† "] ;ANGLE
   ["rightangle" "‚¶ú "]
   ["|_" "‚¶ú "]
   ))


(xah-math-input--add-to-hash
 [
 	;; misc. unicode
	["em" "‚Äî"]
	["emda" "‚Äî"]
	["en" "‚Äì"]
	["enda" "‚Äì"]
	["mm" "‚Äî‚Äî"]; double em-dash
	["line" "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"]
	["bul" "‚Ä¢ "]
	["alb" "‚Ü§"]
	["from" "‚Ü§"]
	["adb" "‚Üß"]
  ["'" "`"] ; single back-tick
  [";;" "``"] ; back-tick pair



])



(xah-math-input--add-to-hash
 [

  ;; J language

  ;; ["ex." "!."]
  ;; ["ex:" "!:"]
  ;; ["at:" "@:"]
  ;; ["h." "#."]
  ;; ["h:" "#:"]
  ;; ["ha." "#."]
  ;; ["ha:" "#:"]
  ;; ["do." "$."]
  ;; ["do:" "$:"]
  ;; ["S." "$."]
  ;; ["S:" "$:"]
  ;; ["pe." "%."]
  ;; ["pe:" "%:"]

  ;; ["/" "%"]

  ["jd" "%"] ; J divide

  ;; ["jd." "%."] ; J divide
  ;; ["jd:" "%:"] ; J divide

  ;; ["/." "%."]
  ;; ["/:" "%:"]

  ;; ["ca." "^."]
  ;; ["ca:" "^:"]
  ;; ["u." "^."]
  ;; ["u:" "^:"]
  ;; ["up." "^."]
  ;; ["up:" "^:"]
  ;; ["am." "&."]
  ;; ["am:" "&:"]
  ;; ["am.:" "&.:"]
  ;; ["as." "*."]
  ;; ["as:" "*:"]
  ;; ["st." "*."]
  ;; ["st:" "*:"]
  ;; ["m." "-."]
  ;; ["m:" "-:"]
  ;; ["mi." "-."]
  ;; ["mi:" "-:"]
  ;; ["p." "+."]
  ;; ["p:" "+:"]
  ;; ["pl." "+."]
  ;; ["pl:" "+:"]
  ;; ["e." "=."]
  ;; ["e:" "=:"]
  ;; ["ch." "{."]
  ;; ["ch:" "{:"]
  ;; ["cl." "}."]
  ;; ["cl:" "}:"]
  ;; ["sh." "[."]
  ;; ["sh:" "[:"]
  ;; ["sl." "]."]
  ;; ["sl:" "]:"]

  ;; ["bh" "["] ; bracket
  ;; ["bl" "]"]

  ["sh" "["] ; square bracket
  ["sl" "]"]
  ["ch" "{"] ; curly
  ["cl" "}"] ; curly
  ["jl" "{{}}"] ; lambda
  ["is'" "=:"] ; J comment
  ["is''" "=."] ; J comment
  ["jis" "=:"] ; J comment
  ["jisl" "=."] ; J comment
  ["jc" "   NB. "] ; J comment
  ["jc'" "NB. "] ; J comment
  ["nb" "   NB. "] ; J comment
  ["nb'" "NB. "] ; J comment

])




(xah-math-input--add-to-hash
 [

	;; Racket
	;; ["ht" "#t"] ; t is taken by "    " for tabbing
	;; ["f" "#f"]
	;; ["emp" "'()"]
	;; ["em" "empty"]
	;; ["emp" "empty"]
	["csae" "case"] ; catch typo
	["casea" "case->"]
	["csaea" "case->"] ; catch typo
	["casel" "case-Œª"]
	["caseL" "case-Œª"]
	["csael" "case-Œª"] ; catch typo
	["csaeL" "case-Œª"] ; catch typo
	;; ["les" "<= "]
	;; ["gre" ">= "]
	;; ["hr" "hash-ref "]
	;; ["lr" "list-ref "]
	;; ["pick" "list-ref "]
	;; ["not" "not "]
	["neg" "negative? "]
	["pos" "positive? "]
	;; ["and" "and "]
	;; ["or" "or "]
	;; ["nor" "nor "]
	;; ["nand" "nand "]
	;; ["xor" "xor "]
	;; ["abs" "abs "]
	;; ["rem" "remove "]
	;; ["rems" "remove* "]
	;; ["rem*" "remove* "]
	["fll" "foldl "]
	["frr" "foldr "]
	;; ["eq" "equal? "]
	;; ["neq" "not-equal? "]
	;; ["p" "length "] ; rho
	;; ["i" "build-list "] ; iota
	;; ["j" "compose1 "]
	;; ["j_" "compose "]
	;; ["flip" "flip "]
	;; ["rev" "reverse "]
	;; ["rot" "reverse "]
	;; ["fmt" "format "]
	;; ["all" "all "]
	;; ["exi" "findf "]
	;; ["any" "findf "]
	;; ["some" "findf "]
	;; ["nex" "none "] ; "not exists"
	;; ["none" "none "]
	;; ["in" "member "]
	;; ["mem" "member "]
	;; ["fm" "filter-map "] ; filter-map
	;; ["mf" "map-filter "] ; map-filter
	["eflr" "exact-floor "] ; result is Integer
	["eflo" "exact-floor "] ; result is Integer
	["ecei" "exact-ceiling "] ; result is Integer
	["flrr" "floor "] ; result is Real
	["ceir" "ceiling "] ; result is Real
	;; ["fil" "filter "]
	;; ["fno" "filter-not "]
	;; ["repl" "replicate "]
	;; ["cat" "concat "]
	;; ["ap" "append "]
	;; ["zipw" "zip-with "]
	;; ["zw" "zip-with "]
	;; ["ir" "in-range? "]
	["lsit" "list "] ; catch typo
	["list" "list "] ; catch typo
	;; ["let" "let* "]

])


(xah-math-input--add-to-hash
 [

		;; --- Types ---
		;; If it's not parameterized (Integer, Natural, Boolean, etc), it has a double-struck letter.
		;; If it is parameterized, it has a bold letter.
		;;     Normal parameterized types (Listof, Vectorof, Pairof, HashTable, etc) are slanted.
		;;     Fixed parameterized types, akin to tuples (List, Vector, Pair) are upright
		;; ADT constructors, (Just, True, etc) are slanted but not bold
		;; The exception is Symbol, which is bold/italic, while String is double-struck, in order to differentiate the two.

	;; ["JS" "JSExpr "]
	;; ["JH" "JSHash "]
	;; ["O" "ùë¥ "]
	;; ["M" "ùë¥ "]
	;; ["JU" "ùêΩ "]
	;; ["NO" "ùëÅ "]
	;; ["EI" "ùë¨ "]
	;; ["RI" "ùëÖ "]
	;; ["LE" "ùêø "]
	;; ["T" "ùëª "]
	;; ["F" "ùë≠ "]
	;; ["B" "ùîπ "]
	;; ["N" "‚Ñï "]
	;; ["IN" "ùïÄ "]
	;; ["NU" "‚ÑÇ "]
	;; ["CO" "‚ÑÇ "]
	;; ["COM" "‚ÑÇ "]
	;; ["Z-" "‚Ñ§‚Åª "]
	;; ["Z-0" "‚Ñ§‚Å∞‚Åª "]
	;; ["Z" "‚Ñ§ "]
	;; ["Z+0" "‚Ñ§‚Å∞‚Å∫ "]
	;; ["Z+" "‚Ñ§‚Å∫ "]
	;; ["R-" "‚Ñù‚Åª "]
	;; ["R-0" "‚Ñù‚Å∞‚Åª "]
	;; ["R" "‚Ñù "]
	;; ["R+0" "‚Ñù‚Å∞‚Å∫ "]
	;; ["R+" "‚Ñù‚Å∫ "]
	;; ["Q-" "‚Ñö‚Åª "]
	;; ["Q-0" "‚Ñö‚Å∞‚Åª "]
	;; ["Q" "‚Ñö "]
	;; ["Q+0" "‚Ñö‚Å∞‚Å∫ "]
	;; ["Q+" "‚Ñö‚Å∫ "]
	;; ["Fl-" "Fl‚Åª "]
	;; ["Fl-0" "Fl‚Å∞‚Åª "]
	;; ["Fl" "Fl "]
	;; ["Fl+0" "Fl‚Å∞‚Å∫ "]
	;; ["Fl+" "Fl‚Å∫ "]
	;; ["L" "ùë≥ "]
	;; ["L'" "ùóü "]
	;; ["LF" "ùóü "]
	;; ["V" "ùëΩ "]
	;; ["V'" "ùó© "]
	;; ["VF" "ùó© "]
	;; ["PA" "ùêè "]
	;; ["STR" "ùïä "]
	;; ["SY" "ùë∫ "]
	;; ["H" "ùëØ "]
	;; ["HI" "ùëØi "]
	;; ["HM" "ùëØm "]
	;; ["A" "ùî∏ "]
	;; ["L^" "ùë≥^ "]
	;; ["Z-" "‚Ñ§‚Åª "]
	;; ["Z0-" "‚Ñ§‚Å∞‚Åª "]
	;; ["Z" "‚Ñ§ "]
	;; ["Z0+" "‚Ñ§‚Å∞‚Å∫ "]
	;; ["Z+" "‚Ñ§‚Å∫ "]
	;; ["R-" "‚Ñù‚Åª "]
	;; ["R0-" "‚Ñù‚Å∞‚Åª "]
	;; ["R" "‚Ñù "]
	;; ["R0+" "‚Ñù‚Å∞‚Å∫ "]
	;; ["R+" "‚Ñù‚Å∫ "]
	;; ["Q-" "‚Ñö‚Åª "]
	;; ["Q0-" "‚Ñö‚Å∞‚Åª "]
	;; ["Q" "‚Ñö "]
	;; ["Q0+" "‚Ñö‚Å∞‚Å∫ "]
	;; ["Q+" "‚Ñö‚Å∫ "]
	;; ["Fl-" "Fl‚Åª "]
	;; ["Fl0-" "Fl‚Å∞‚Åª "]
	;; ["Fl" "Fl "]
	;; ["Fl0+" "Fl‚Å∞‚Å∫ "]
	;; ["Fl+" "Fl‚Å∫ "]
	;; ["ZN" "‚Ñ§‚Åª "]
	;; ["ZN0" "‚Ñ§‚Å∞‚Åª "]
	;; ["Z" "‚Ñ§ "]
	;; ["ZP0" "‚Ñ§‚Å∞‚Å∫ "]
	;; ["ZP" "‚Ñ§‚Å∫ "]
	;; ["RN" "‚Ñù‚Åª "]
	;; ["RN0" "‚Ñù‚Å∞‚Åª "]
	;; ["R" "‚Ñù "]
	;; ["RP0" "‚Ñù‚Å∞‚Å∫ "]
	;; ["RP" "‚Ñù‚Å∫ "]
	;; ["QN" "‚Ñö‚Åª "]
	;; ["QN0" "‚Ñö‚Å∞‚Åª "]
	;; ["Q" "‚Ñö "]
	;; ["QP0" "‚Ñö‚Å∞‚Å∫ "]
	;; ["QP" "‚Ñö‚Å∫ "]
	;; ["FLN" "Fl‚Åª "]
	;; ["FLN0" "Fl‚Å∞‚Åª "]
	;; ["FL" "Fl "]
	;; ["FLP0" "Fl‚Å∞‚Å∫ "]
	;; ["FLP" "Fl‚Å∫ "]

	;; ;; overrides
	;; ["OP" "Option "]
	;; ["M" "Maybe "]
	;; ["JU" "Just "]
	;; ["NO" "Nothing "]
	;; ["EI" "Either "]
	;; ["RI" "Right "]
	;; ["LE" "Left "]
	;; ["A" "Any "]
	;; ["T" "True "]
	;; ["F" "False "]
	;; ["B" "Boolean "]
	;; ["N" "Natural "]
	;; ["IN" "Index "]
	;; ["NU" "Number "]
	;; ["CO" "Complex "]
	;; ["COM" "Complex "]
	;; ["Z" "Integer "]
	;; ["R" "Real "]
	;; ["Q" "Exact-Rational "]
	;; ["FL" "Float "]
	;; ["L" "Listof "]
	;; ["L'" "List "]
	;; ["VE" "Vectorof "]
	;; ["VE'" "Vector "]
	;; ["PA" "Pair "]
	;; ["PS" "Path-String "]
	;; ["ST" "String "]
	;; ["SY" "Symbol "]
	;; ["HT" "HashTable "]
	;; ["HA" "HashTable "]
	;; ["HI" "ImmutableHashTable "]
	;; ["HM" "MutableHashTable "]
	;; ["L^" "Non-Empty-List "]
	;; ["JS" "JSExpr "]
	;; ["JH" "JSHash "]


		;; ----------------------------------------------

	;; ["M" "ùë¥ "]
	;; ["JU" "ùêΩ "]
	;; ["NO" "ùëÅ "]
	;; ["EI" "ùë¨ "]
	;; ["RI" "ùëÖ "]
	;; ["LE" "ùêø "]
	;; ["T" "ùëª "]
	;; ["F" "ùë≠ "]
	;; ["B" "ùêÅ "]
	;; ["O" "ùë¥ "]
	;; ["N" "ùêç "]
	;; ["IN" "ùêà "]
	;; ["NU" "‚ÑÇ "]
	;; ["CO" "‚ÑÇ "]
	;; ["COM" "‚ÑÇ "]
	;; ["ZN" "ùêô‚Åª "]
	;; ["ZN0" "ùêô‚Å∞‚Åª "]
	;; ["Z" "ùêô "]
	;; ["ZP0" "ùêô‚Å∞‚Å∫ "]
	;; ["ZP" "ùêô‚Å∫ "]
	;; ["L" "ùë≥ "]
	;; ["L'" "ùóü "]
	;; ["V" "ùëΩ "]
	;; ["V'" "ùó© "]
	;; ["PA" "Pair "]
	;; ["RN" "ùêë‚Åª "]
	;; ["RN0" "ùêë‚Å∞‚Åª "]
	;; ["R" "ùêë "]
	;; ["RP0" "ùêë‚Å∞‚Å∫ "]
	;; ["RP" "ùêë‚Å∫ "]
	;; ["FLN" "Fl‚Åª "]
	;; ["FLN0" "Fl‚Å∞‚Åª "]
	;; ["FL" "Fl "]
	;; ["FLP0" "Fl‚Å∞‚Å∫ "]
	;; ["FLP" "Fl‚Å∫ "]
	;; ["ST" "ùïä "]
	;; ["SY" "ùë∫ "]
	;; ["H" "ùëØ "]
	;; ["HI" "ùëØi "]
	;; ["HM" "ùëØm "]
	;; ["A" "ùêÄ "]
	;; ["QN" "ùêê‚Åª "]
	;; ["QN0" "ùêê‚Å∞‚Åª "]
	;; ["Q" "ùêê "]
	;; ["QP0" "ùêê‚Å∞‚Å∫ "]
	;; ["QP" "ùêê‚Å∫ "]
	;; ["L^" "ùë≥^ "]
	;; ["JS" "JSExpr "]
	;; ["JH" "JSHash "]

	;; ----------------------------------------------


	;; ["M" "Maybe "]
	;; ["JU" "Just "]
	;; ["NO" "Nothing "]
	;; ["EI" "Either "]
	;; ["RI" "Right "]
	;; ["LE" "Left "]
	;; ["T" "True "]
	;; ["F" "False "]
	;; ["B" "Boolean "]
	;; ["OP" "Option "]
	;; ["N" "Natural "]
	;; ["IN" "Index "]
	;; ["In" "Index "]
	;; ["NU" "Number "]
	;; ["CO" "Complex "]
	;; ["COM" "Complex "]
	;; ["Z-" "Negative-Integer "]
	;; ["Z0-" "Nonpositive-Integer "]
	;; ["Z" "Integer "]
	;; ["Z0+" "Nonnegative-Integer "]
	;; ["Z+" "Positive-Integer "]
	;; ["R-" "Negative-Real "]
	;; ["R0-" "Nonpositive-Real "]
	;; ["R" "Real "]
	;; ["R0+" "Nonnegative-Real "]
	;; ["R+" "Positive-Real "]
	;; ["FL-" "Negative-Float "]
	;; ["FL0-" "Nonpositive-Float "]
	;; ["FL" "Float "]
	;; ["FL0+" "Nonnegative-Float "]
	;; ["FL+" "Positive-Float "]
	;; ["Q-" "Negative-Exact-Rational "]
	;; ["Q0-" "Nonpositive-Exact-Rational "]
	;; ["Q" "Exact-Rational "]
	;; ["Q0+" "Nonnegative-Exact-Rational "]
	;; ["Q+" "Positive-Exact-Rational "]
	;; ["L" "Listof "]
	;; ["L'" "List "]
	;; ["VE" "Vectorof "]
	;; ["VE'" "Vector "]
	;; ["PA" "Pair "]
	;; ["ST" "String "]
	;; ["SY" "Symbol "]
	;; ["HT" "HashTable "]
	;; ["HI" "ImmutableHashTable "]
	;; ["HM" "MutableHashTable "]
	;; ["L^" "Non-Empty-List "]
	;; ["JS" "JSExpr "]
	;; ["JH" "JSHash "]
	;; ["Z-" "Negative-Integer "]
	;; ["Z-0" "Nonpositive-Integer "]
	;; ["Z" "Integer "]
	;; ["Z+0" "Nonnegative-Integer "]
	;; ["Z+" "Positive-Integer "]
	;; ["R-" "Negative-Real "]
	;; ["R-0" "Nonpositive-Real "]
	;; ["R" "Real "]
	;; ["R+0" "Nonnegative-Real "]
	;; ["R+" "Positive-Real "]
	;; ["FL-" "Negative-Float "]
	;; ["FL-0" "Nonpositive-Float "]
	;; ["FL" "Float "]
	;; ["FL+0" "Nonnegative-Float "]
	;; ["FL+" "Positive-Float "]
	;; ["Q-" "Negative-Exact-Rational "]
	;; ["Q-0" "Nonpositive-Exact-Rational "]
	;; ["Q" "Exact-Rational "]
	;; ["Q+0" "Nonnegative-Exact-Rational "]
	;; ["Q+" "Positive-Exact-Rational "]
	;; ["ZN" "Negative-Integer "]
	;; ["ZN0" "Nonpositive-Integer "]
	;; ["Z" "Integer "]
	;; ["ZP0" "Nonnegative-Integer "]
	;; ["ZP" "Positive-Integer "]
	;; ["RN" "Negative-Real "]
	;; ["RN0" "Nonpositive-Real "]
	;; ["R" "Real "]
	;; ["RP0" "Nonnegative-Real "]
	;; ["RP" "Positive-Real "]
	;; ["FLN" "Negative-Float "]
	;; ["FLN0" "Nonpositive-Float "]
	;; ["FL" "Float "]
	;; ["FLP0" "Nonnegative-Float "]
	;; ["FLP" "Positive-Float "]
	;; ["QN" "Negative-Exact-Rational "]
	;; ["QN0" "Nonpositive-Exact-Rational "]
	;; ["Q" "Exact-Rational "]
	;; ["QP0" "Nonnegative-Exact-Rational "]
	;; ["QP" "Positive-Exact-Rational "]

	])



(xah-math-input--add-to-hash
 [
	["deg" "¬∞"]
  ["micro" "¬µ"]
  ["mdot" "¬∑"]
  ["1/4" "¬º"]
  ["1/2" "¬Ω"]
  ["3/4" "¬æ"]

  ["Theta" "Œò"] ["Lambda" "Œõ"] ["Xi" "Œû"] ["Phi" "Œ¶"] ["Psi" "Œ®"] ["Omega" "Œ©"]

  ["beta" "Œ≤"] ["delta" "Œ¥"] ["epsilon" "Œµ"] ["zeta" "Œ∂"] ["eta" "Œ∑"] ["theta" "Œ∏"] ["mu" "Œº"] ["xi" "Œæ"] ["sigmaf" "œÇ"] ["tau" "œÑ"] ["phi" "œÜ"] ["psi" "œà"] ["theta'" "œë"] ["upsih" "œí"] ["piv" "œñ"]

  ["ndash" "‚Äì"] ["mdash" "‚Äî"]

  ["times" "√ó"] ["divide" "√∑"] ["minus" "‚àí "] ["lowast" "‚àó "] ["radic" "‚àö"]
  ["oplus" "‚äï"] ["otimes" "‚äó"] ["ox" "‚äó"]
  ["oslash" "√∏"]
  ["fnof" "∆í"]

  ;; ["dp" "‚àÇ"] ;; already mapped to 'd'

	["ang" "‚à†"]

  ["perp" "‚ä•"] ["bot" "‚ä•"] ["top" "‚ä§"] ["dop" "‚ãÖ"] ; dot operator

  ["ceih" "‚åà"] ["ceil" "‚åâ"] ["flrh" "‚åä"] ["flrl" "‚åã"]

  ["lang" "‚å©"] ["rang" "‚å™"]

  ]
 )


(xah-math-input--add-to-hash
 [
  ;; misc non-math symbols
  ["tm" "‚Ñ¢"]
  ["3/4" "¬æ"]
  ["1/2" "¬Ω"]
  ["1/4" "¬º"]
  [".." "‚Ä¶"] ; ellipsis
  ["..." "‚Ä¶"] ; ellipsis
  ["ell" "‚Ä¶"] ; ellipsis
  ["ran" "‚Ä¶"]
  ["rng" "‚Ä¶"]
  ["rn" "‚Ä¶"]
  ["rg" "‚Ä¶"]
  ["fdash" "‚Äí"]
  ["wdash" "„Äú"]
  ["----" "‚Äî‚Äî"] ; double m-dash
  ["---" "‚Äî"] ; em-dash
  ["--" "‚Äì"] ; en-dash
  ;; ["??" "‚Åá "]
  ;; ["?!" "‚Åà "]
  ;; ["!?" "‚Åâ "]
  ;; ["!!" "‚Äº "]

  ;;
  ]

 )

(xah-math-input--add-to-hash
 [
  ["m2" "„é°"]
  ["cm'" "„éù"]
  ["cm2" "„é†"]
  ["cm3" "„é§"]
  ] )


(xah-math-input--add-to-hash
 [
  ;; superscripts


  ["0" "‚Å∞"]
  ["1" "¬π"]
  ["2" "¬≤"]
  ["3" "¬≥"]
  ["4" "‚Å¥"]
  ["5" "‚Åµ"]
  ["6" "‚Å∂"]
  ["7" "‚Å∑"]
  ["8" "‚Å∏"]
  ["9" "‚Åπ"]

  ["-1" "‚Åª¬π"]
  ["-2" "‚Åª¬≤"]
  ["-3" "‚Åª¬≥"]
  ["-4" "‚Åª‚Å¥"]
  ["-5" "‚Åª‚Åµ"]
  ["-6" "‚Åª‚Å∂"]
  ["-7" "‚Åª‚Å∑"]
  ["-8" "‚Åª‚Å∏"]
  ["-9" "‚Åª‚Åπ"]

  ["m1" "‚Åª¬π"]
  ["m2" "‚Åª¬≤"]
  ["m3" "‚Åª¬≥"]
  ["m4" "‚Åª‚Å¥"]
  ["m5" "‚Åª‚Åµ"]
  ["m6" "‚Åª‚Å∂"]
  ["m7" "‚Åª‚Å∑"]
  ["m8" "‚Åª‚Å∏"]
  ["m9" "‚Åª‚Åπ"]

  ["+" "‚Å∫"]
  ["-" "¬Ø"] ; macron, not actual superscript minus, since it looks better anyway and this stops us from making booboos in APL
  ["=" "‚Åº"]
  ["(up" "‚ÅΩ"]
  [")up" "‚Åæ"]
  ["nup" "‚Åø"]
  ["iup" "‚Å±"]





  ;; subscripts
  ["_(" "‚Çç"]
  ["_)" "‚Çé"]
  ["_+" "‚Çä"]
  ["_-" "‚Çã"]
  ["_0" "‚ÇÄ"]
  ["_1" "‚ÇÅ"]
  ["_2" "‚ÇÇ"]
  ["_3" "‚ÇÉ"]
  ["_4" "‚ÇÑ"]
  ["_5" "‚ÇÖ"]
  ["_6" "‚ÇÜ"]
  ["_7" "‚Çá"]
  ["_8" "‚Çà"]
  ["_9" "‚Çâ"]
  ["_=" "‚Çå"]
  ["_a" "‚Çê"]
  ["_e" "‚Çë"]
  ["_h" "‚Çï"]
  ["_i" "·µ¢"]
  ["_j" "‚±º"]
  ["_k" "‚Çñ"]
  ["_l" "‚Çó"]
  ["_m" "‚Çò"]
  ["_n" "‚Çô"]
  ["_o" "‚Çí"]
  ["_p" "‚Çö"]
  ["_r" "·µ£"]
  ["_s" "‚Çõ"]
  ["_t" "‚Çú"]
  ["_u" "·µ§"]
  ["_v" "·µ•"]
  ["_x" "‚Çì"]
  ["_sch" "‚Çî"]; schwa

  ["(_" "‚Çç"]
  [")_" "‚Çé"]
  ["+_" "‚Çä"]
  ["-_" "‚Çã"]
  ["0_" "‚ÇÄ"]
  ["1_" "‚ÇÅ"]
  ["2_" "‚ÇÇ"]
  ["3_" "‚ÇÉ"]
  ["4_" "‚ÇÑ"]
  ["5_" "‚ÇÖ"]
  ["6_" "‚ÇÜ"]
  ["7_" "‚Çá"]
  ["8_" "‚Çà"]
  ["9_" "‚Çâ"]
  ["=_" "‚Çå"]
  ["a_" "‚Çê"]
  ["e_" "‚Çë"]
  ["h_" "‚Çï"]
  ["i_" "·µ¢"]
  ["j_" "‚±º"]
  ["k_" "‚Çñ"]
  ["l_" "‚Çó"]
  ["m_" "‚Çò"]
  ["n_" "‚Çô"]
  ["o_" "‚Çí"]
  ["p_" "‚Çö"]
  ["r_" "·µ£"]
  ["s_" "‚Çõ"]
  ["t_" "‚Çú"]
  ["u_" "·µ§"]
  ["v_" "·µ•"]
  ["x_" "‚Çì"]
  ["sch_" "‚Çî"]; schwa

  ["(d" "‚Çç"] ; "down"
  [")d" "‚Çé"]
  ["+d" "‚Çä"]
  ["-d" "‚Çã"]
  ["0d" "‚ÇÄ"]
  ["1d" "‚ÇÅ"]
  ["2d" "‚ÇÇ"]
  ["3d" "‚ÇÉ"]
  ["4d" "‚ÇÑ"]
  ["5d" "‚ÇÖ"]
  ["6d" "‚ÇÜ"]
  ["7d" "‚Çá"]
  ["8d" "‚Çà"]
  ["9d" "‚Çâ"]
  ["=d" "‚Çå"]

  ;; ["(do" "‚Çç"] ; messes with doing "($"; use "(d"
  ;; [")do" "‚Çé"] ; messes with doing ")$"; use ")d"
  ["+do" "‚Çä"]
  ["-do" "‚Çã"]
  ["0do" "‚ÇÄ"]
  ["1do" "‚ÇÅ"]
  ["2do" "‚ÇÇ"]
  ["3do" "‚ÇÉ"]
  ["4do" "‚ÇÑ"]
  ["5do" "‚ÇÖ"]
  ["6do" "‚ÇÜ"]
  ["7do" "‚Çá"]
  ["8do" "‚Çà"]
  ["9do" "‚Çâ"]
  ["=do" "‚Çå"]
  ["ado" "‚Çê"]
  ["edo" "‚Çë"]
  ["hdo" "‚Çï"]
  ["ido" "·µ¢"]
  ["jdo" "‚±º"]
  ["kdo" "‚Çñ"]
  ["ldo" "‚Çó"]
  ["mdo" "‚Çò"]
  ["ndo" "‚Çô"]
  ["odo" "‚Çí"]
  ["pdo" "‚Çö"]
  ["rdo" "·µ£"]
  ["sdo" "‚Çõ "]
  ["td" "‚Çú"]
  ["udo" "·µ§"]
  ["vdo" "·µ•"]
  ["xdo" "‚Çì"]
  ["schdo" "‚Çî"]; schwa

  ["‚Å∞" "‚ÇÄ"]
  ["¬π" "‚ÇÅ"]
  ["¬≤" "‚ÇÇ"]
  ["¬≥" "‚ÇÉ"]
  ["‚Å¥" "‚ÇÑ"]
  ["‚Åµ" "‚ÇÖ"]
  ["‚Å∂" "‚ÇÜ"]
  ["‚Å∑" "‚Çá"]
  ["‚Å∏" "‚Çà"]
  ["‚Åπ" "‚Çâ"]

  ["‚Åª¬π" "‚Çã‚ÇÅ"]
  ["‚Åª¬≤" "‚Çã‚ÇÇ"]
  ["‚Åª¬≥" "‚Çã‚ÇÉ"]
  ["‚Åª‚Å¥" "‚Çã‚ÇÑ"]
  ["‚Åª‚Åµ" "‚Çã‚ÇÖ"]
  ["‚Åª‚Å∂" "‚Çã‚ÇÜ"]
  ["‚Åª‚Å∑" "‚Çã‚Çá"]
  ["‚Åª‚Å∏" "‚Çã‚Çà"]
  ["‚Åª‚Åπ" "‚Çã‚Çâ"]

  ["‚Å∫" "‚Çä"]
  ["¬Ø" "‚Çã"] ; macron, not actual superscript minus, since it looks better anyway and this stops us from making booboos in APL
  ["‚Åº" "‚Çå"]
  ["‚ÅΩ" "‚Çç"]
  ["‚Åæ" "‚Çé"]
  ])

(xah-math-input--add-to-hash
 '(

   ;; ["flr" "‚åä‚åã "]
   ;; ["ceil" "‚åà‚åâ "]
   ;; ["floor" "‚åä‚åã "]
   ;; ["ceiling" "‚åà‚åâ "]

   ;; ["\"" "‚Äú‚Äù "] ;curly quote
   ;; ["\"\"" "‚Äú‚Äù "]

   ;; ["cb" "„Äå„Äç "] ; corner bracket
   ;; ["[" "„Äå„Äç "]

   ;; ["[(" "„Äê„Äë "] ; LEFT BLACK LENTICULAR BRACKET

  ;;   ["tb" "„Äî„Äï "] ; TORTOISE SHELL BRACKET
  ;; ["(" "„Äî„Äï "]

   ))


(xah-math-input--add-to-hash
 '(
   ;; letter-like forms
   ["R2" "‚Ñù¬≤"]
   ["R3" "‚Ñù¬≥"]
   ["r2" "‚Ñù¬≤"]
   ["r3" "‚Ñù¬≥"]
   ;; ["fn" "∆í "]
   ))

(xah-math-input--add-to-hash
 '(

   ["<-" "‚Üê"] ["->" "‚Üí"] ["<->" "‚Üî"] ["!<-" "‚Üö"] ["!->" "‚Üõ"] ["!<->" "‚ÜÆ"]
   ;; ["<=" "‚áê"] ["=>" "‚áí"]
    ["<=>" "‚áî "] ["!<=" "‚áç "] ["!=>" "‚áè "] ["!<=>" "‚áé "]
   ["<==" "‚ü∏ "] ["==>" "‚üπ "] ["<==>" "‚ü∫ "]
   ["<-|" "‚Ü§"] ["|->" "‚Ü¶"]
   ["<--" "‚üµ "] ["-->" "‚ü∂ "] ["<-->" "‚ü∑ "]
   ;; ["al" "‚Üê "]
   ;; ["ar" "‚Üí "]
   ;; ["au" "‚Üë "]
   ;; ["ad" "‚Üì "]
   ["-!" "‚Üë "]
   ["-^" "‚Üë "]
   ["-v" "‚Üì "]

   ))



(defun xah-math-input--hash-to-list (hashtable)
  "Return a list that represent the HASHTABLE."
  (let (mylist)
    (maphash (lambda (kk vv) (setq mylist (cons (list vv kk) mylist))) hashtable)
    mylist
    ))

(defun xah-math-input-list-math-symbols ()
  "Print a list of math symbols and their input abbreviations.
See `xah-math-input-mode'."
  (interactive)
  (with-output-to-temp-buffer "*xah-math-input output*"
    (mapc (lambda (tt)
            (princ (concat (car tt) " " (car (cdr tt)) "\n")))
          (sort
           (xah-math-input--hash-to-list xah-math-input-abrvs)
           (lambda
             (a b)
             (string< (car a) (car b)))))))

(defvar xah-math-input-keymap nil "Keymap for xah-math-input mode.")

(progn
  (setq xah-math-input-keymap (make-sparse-keymap))
  (define-key xah-math-input-keymap (kbd "S-SPC") 'xah-math-input-change-to-symbol))

(defun xah-math-input--abbr-to-symbol (@inputStr)
  "Returns a char corresponding to @inputStr.
If none found, return nil.
Version 2018-02-16"
  (let ($resultChar $charByNameResult)
    (setq $resultChar (gethash @inputStr xah-math-input-abrvs))
    (cond
     ($resultChar $resultChar)
     ;; begin with u+
     ((string-match "\\`u\\+\\([0-9a-fA-F]+\\)\\'" @inputStr) (char-to-string (string-to-number (match-string 1 @inputStr) 16)))
     ;; decimal. „Äå945„Äç or „Äå#945„Äç
     ((string-match "\\`#?\\([0-9]+\\)\\'" @inputStr) (char-to-string (string-to-number (match-string 1 @inputStr))))
     ;; e.g. decimal with html entity markup. „Äå&#945;„Äç
     ((string-match "\\`&#\\([0-9]+\\);\\'" @inputStr) (char-to-string (string-to-number (match-string 1 @inputStr))))
     ;; hex number. e.g. „Äåx3b1„Äç or „Äå#x3b1„Äç
     ((string-match "\\`#?x\\([0-9a-fA-F]+\\)\\'" @inputStr) (char-to-string (string-to-number (match-string 1 @inputStr) 16)))
     ;; html entity hex number. e.g. „Äå&#x3b1;„Äç
     ((string-match "\\`&#x\\([0-9a-fA-F]+\\);\\'" @inputStr) (char-to-string (string-to-number (match-string 1 @inputStr) 16)))
     ;; unicode full name. e.g. „ÄåGREEK SMALL LETTER ALPHA„Äç
     ((and (string-match "\\`\\([- a-zA-Z0-9]+\\)\\'" @inputStr)
           (setq $charByNameResult (xah-math-input--name-to-codepoint @inputStr)))
      (char-to-string $charByNameResult))
     (t nil))))

(defun xah-math-input--name-to-codepoint (@name)
  "Returns integer that's the codepoint of Unicode char named @name (string).
Version 2018-07-09"
  (interactive)
  (if (version<= "26" emacs-version)
      (gethash @name (ucs-names))
    (assoc-string @name (ucs-names) t)))

(defun xah-math-input-change-to-symbol (&optional print-message-when-no-match)
  "Change text selection or word to the left of cursor into a Unicode character.

A valid input can be any abbreviation listed by the command `xah-math-input-list-math-symbols', or, any of the following form:

 945     ‚Üê decimal
 #945    ‚Üê decimal with prefix #
 &#945;  ‚Üê XML entity syntax

 x3b1    ‚Üê hexadimal with prefix x
 U+3B1   ‚Üê hexadimal with prefix U+ (lower case ok.)
 #x3b1   ‚Üê hexadimal with prefix #x
 &#x3b1; ‚Üê XML entity syntax

Full Unicode name can also be used, e.g. „Äågreek small letter alpha„Äç.

If preceded by `universal-argument', print error message when no valid abbrev found.

See also: `xah-math-input-mode'.
Version 2018-07-09"
  (interactive "P")
  (let ($p1 $p2 $inputStr $resultChar)
    (if (region-active-p)
        (progn
          (setq $p1 (region-beginning))
          (setq $p2 (region-end))
          (setq $inputStr (buffer-substring-no-properties $p1 $p2))
          (setq $resultChar (xah-math-input--abbr-to-symbol $inputStr))
          (when $resultChar (progn (delete-region $p1 $p2) (insert $resultChar))))
      ;; if there's no text selection, grab all chars to the left of cursor point up to whitespace, try each string until there a valid abbrev found or none char left.
      (progn
        (setq $p2 (point))
        (skip-chars-backward "^ \t\n" -20)
        (setq $p1 (point))
        (while (and (not $resultChar) (>= (- $p2 $p1) 1))
          (setq $inputStr (buffer-substring-no-properties $p1 $p2))
          (setq $resultChar (xah-math-input--abbr-to-symbol $inputStr))
          (when $resultChar (progn (goto-char $p2) (delete-region $p1 $p2) (insert $resultChar)))
          (setq $p1 (1+ $p1)))))
    (when (not $resultChar)
      (when print-message-when-no-match
        (xah-math-input-list-math-symbols)
        (user-error "„Äå%s„Äç no match found for that abbrev/input. M-x `xah-math-input-list-math-symbols' for a list. Or use a decimal e.g. „Äå945„Äç or hexadecimal e.g. „Äåx3b1„Äç, or full Unicode name e.g. „Äågreek small letter alpha„Äç."  $inputStr)))))

;;;###autoload
(define-globalized-minor-mode global-xah-math-input-mode xah-math-input-mode xah-math-input-mode-on)

;;;###autoload
(defun xah-math-input-mode-on ()
  "Turn on `xah-math-input-mode' in current buffer."
  (interactive)
  (xah-math-input-mode 1))

;;;###autoload
(defun xah-math-input-mode-off ()
  "Turn off `xah-math-input-mode' in current buffer."
  (interactive)
  (xah-math-input-mode 0))

;;;###autoload
(define-minor-mode xah-math-input-mode
  "Toggle xah-math-input minor mode.

A mode for inputting a math and Unicode symbols.

Type ‚Äúinf‚Äù, then press \\[xah-math-input-change-to-symbol] (or M-x `xah-math-input-change-to-symbol'), then it becomes ‚Äú‚àû‚Äù.

Other examples:
 a ‚Üí Œ±
 p ‚Üí œÄ
 /= ‚Üí ‚â† or ne
 >= ‚Üí ‚â• or ge
 -> ‚Üí ‚Üí or rarr
 and ‚Üí ‚àß
etc.

If you have a text selection, then selected word will be taken as input. For example, type „Äåextraterrestrial alien„Äç, select the phrase, then press \\[xah-math-input-change-to-symbol], then it becomse üëΩ.

For the complete list of abbrevs, call `xah-math-input-list-math-symbols'.

Decimal and hexadecimal can also be used. Example:

 945     ‚Üê decimal
 #945    ‚Üê decimal with prefix #
 &#945;  ‚Üê XML entity syntax

 x3b1    ‚Üê hexadimal with prefix x
 #x3b1   ‚Üê hexadimal with prefix #x
 &#x3b1; ‚Üê XML entity syntax

Full Unicode name can also be used, e.g. „Äågreek small letter alpha„Äç.

If you wish to enter a symbor by full unicode name but do not know the full name, M-x `insert'. Asterisk ‚Äú*‚Äù can be used as a wildcard to find the char. For example, M-x `insert' , then type „Äå*arrow„Äç then Tab, then emacs will list all unicode char names that has ‚Äúarrow‚Äù in it. (this feature is part of Emacs 23)

Home page at: URL `http://ergoemacs.org/emacs/xah-math-input-math-symbols-input.html'"
  nil
  :global nil
  :lighter " ‚àëŒ±"
  :keymap xah-math-input-keymap
  )

(provide 'xah-math-input)

;;; xah-math-input.el ends here

